@model HappyZu.CloudStore.Web.Areas.Admin.Models.EditDestViewModel


@using Abp.Json
@using Senparc.Weixin.HttpUtility
@{
    ViewBag.Title = "编辑景点";
}

<!-- BEGIN PAGE BAR -->
<div class="page-bar">
    <ul class="page-breadcrumb">
        <li>
            <a href="@Url.Action("Index", "Dashboard",new {area="Admin"},true)">控制面板</a>
            <i class="fa fa-angle-right"></i>
        </li>
        <li>
            <a href="@Url.Action("Index", "Destination",new {area="Admin"},true)">景点管理</a>
            <i class="fa fa-angle-right"></i>
        </li>
        <li>
            <span>@ViewBag.Title</span>
        </li>
    </ul>
</div>
<!-- END PAGE BAR -->
<!-- BEGIN PAGE TITLE-->


<div class="row">
    <div class="col-md-12 col-sm-12">
        <div class="zone zone-content">
            <div class="portlet solid portlet-box">
                <div class="portlet-title">
                    <div class="caption">
                        @ViewBag.Title
                    </div>
                    <div class="actions content-edit-box-actions">
                        <button type="button" onclick="javascript:OpenWindow('/flower-girl-bracelet', 800, 600, true); return false;" class="btn purple">
                            <i class="fa fa-eye"></i>
                            预览
                        </button>
                        <button type="submit" name="save" class="btn blue" data-loading-text="正在保存..." data-bind="click:submit">
                            <i class="fa fa-floppy-o"></i>
                            保存
                        </button>
                        <button type="submit" name="save-continue" class="btn blue">
                            <i class="fa fa-floppy-o"></i>
                            保存并继续编辑
                        </button>
                        <button type="button" name="copyproduct" class="btn green-meadow" data-toggle="modal" data-target="#copyproduct-window">
                            <i class="fa fa-clone"></i>
                            复制景点
                        </button>
                        <span id="product-delete" class="btn red" data-toggle="modal" data-target="#productmodel-delete-confirmation">
                            <i class="fa fa-trash-o"></i>
                            删除
                        </span>
                    </div>
                </div>
                <div class="portlet-body">
                    @using (Html.BeginForm("DestEdit", "Destination", FormMethod.Post, new { id = "uiform" }))
                    {
                        @Html.Partial("_DestCreateOrEdit")
                    }
                </div>
            </div>

        </div>
    </div>
</div>
<div class="clearfix">
</div>
@section style_plugins{
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-modal/css/bootstrap-modal-bs3patch.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-modal/css/bootstrap-modal.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-summernote/summernote.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-fileinput/bootstrap-fileinput.css" rel="stylesheet" />
}
@section script_plugins{
    <script src="~/Areas/Admin/content/global/plugins/moment.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-datepicker/locales/bootstrap-datepicker.zh-CN.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-modal/js/bootstrap-modalmanager.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-modal/js/bootstrap-modal.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-summernote/summernote.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-summernote/lang/summernote-zh-CN.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-fileinput/bootstrap-fileinput.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/jquery-file-upload/js/vendor/jquery.ui.widget.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/jquery-file-upload/js/jquery.fileupload.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/knockout/knockout.mapping-latest.js"></script>
    <script src="http://api.map.baidu.com/api?v=2.0&ak=SARIdZ6EA22D6Si5luRMjCYU"></script>
}
@section scripts{
    <script>
        $(function() {
            $.fn.modal.defaults.spinner = $.fn.modalmanager.defaults.spinner =
                '<div class="loading-spinner" style="width: 200px; margin-left: -100px;">' +
                '<div class="progress progress-striped active">' +
                '<div class="progress-bar" style="width: 100%;"></div>' +
                '</div>' +
                '</div>';

            $(".input-booking-notice")
                .summernote({
                    height: 300,
                    dialogsInBody: true,
                    placeholder: '预订须知',
                    lang: "zh-CN",
                    callbacks: {
                        onBlur: function() {
                            vm.BookingNotice($(".input-booking-notice").val());
                        }
                    }
                });
            $(".input-agreement")
                .summernote({
                    height: 300,
                    dialogsInBody: true,
                    placeholder: '游玩协议',
                    lang: "zh-CN",
                    callbacks: {
                        onBlur: function(contents, $editable) {
                            vm.Agreement($(".input-agreement").val());
                        }
                    }
                });
            $(".input-description")
                .summernote({
                    height: 300,
                    dialogsInBody: true,
                    placeholder: '景点介绍',
                    lang: "zh-CN",
                    callbacks: {
                        onBlur: function(contents, $editable) {
                            vm.Introduce($(".input-description").val());
                        }
                    }
                });

            if (jQuery().datepicker) {
                $('.date-picker')
                    .datepicker({
                        language: "zh-CN",
                        autoclose: true,
                        isRTL: App.isRTL(),
                        pickerPosition: (App.isRTL() ? "bottom-right" : "bottom-left")
                    });
                //$('body').removeClass("modal-open"); //fix bug when inline picker is used in modal
            }

            vm.loadProvinces();
        });

        $('#location-map')
            .on('shown.bs.modal',
                function() {
                    var $city = $('#@Html.IdFor(m => m.Dest.CityId) option:selected');
                    App.blockUI({ target: '#location-map', animate: true });
                    /*地图*/
                    var map = new BMap.Map("map-widget"); // 创建Map实例

                    if (vm.Lat() !== '' && vm.Lng() !== '') {
                        var point = new BMap.Point(vm.Lng(), vm.Lat());
                        map.centerAndZoom(point, 11); // 初始化地图,设置中心点坐标和地图级别
                        var defaultMarker = new BMap.Marker(e.point); // 创建标注
                        map.addOverlay(defaultMarker);
                    } else {
                        var city = $city.text();
                        if (city === '' || city === undefined) {
                            city = '长沙';
                        }
                        map.centerAndZoom(city, 11); // 初始化地图,设置中心点坐标和地图级别
                    }
                    map.addControl(new BMap.MapTypeControl()); //添加地图类型控件
                    map.enableScrollWheelZoom(true); //开启鼠标滚轮缩放
                    map.addEventListener("tilesloaded",
                        function() {
                            App.unblockUI('#location-map');
                        });
                    map.addEventListener("click",
                        function(e) {
                            $('.choose-location').html('您选中的位置：lng：' + e.point.lng + ",lat：" + e.point.lat);
                            $('.choose-location').attr('data-lng', e.point.lng);
                            $('.choose-location').attr('data-lat', e.point.lat);
                            map.clearOverlays();
                            var marker = new BMap.Marker(e.point); // 创建标注
                            map.addOverlay(marker);
                        });
                });

        $('.save-location')
            .on('click',
                function() {
                    var lng = $('.choose-location').attr('data-lng');
                    var lat = $('.choose-location').attr('data-lat');
                    var empty = false;

                    if (lng === '' || lng === undefined) {
                        empty = true;
                    }
                    if (lat === '' || lat === undefined) {
                        empty = true;
                    }

                    if (!empty || confirm("您还没有选中位置确定要放弃吗？")) {
                        if (!empty) {
                            vm.Lat(lat);
                            vm.Lng(lng);
                        }
                        $('#location-map').modal('hide');
                    }
                });

        /*数据绑定*/
        function htmldecode(s) {
            var div = document.createElement('div');
            div.innerHTML = s;
            return div.innerText || div.textContent;
        }

        function htmlencode(s) {
            var div = document.createElement('div');
            div.appendChild(document.createTextNode(s));
            return div.innerHTML;
        }

        /*上传图片*/
        var uploadModal = $('#upload-pic');

        var ViewModel = function(title,
            subject,
            introduce,
            feature,
            openTime,
            isPublished,
            publishDateTime,
            displayOrder,
            destType,
            provinceId,
            cityId,
            address,
            lng,
            lat,
            supplierId,
            supplier,
            bookingNotice,
            agreement,
            metaTitle,
            metaKeywords,
            metaDescription,
            returnUrl) {
            var _this = this;
            this.Provinces = ko.observableArray([]);
            this.Cities = ko.observableArray([]);
            this.Title = ko.observable(title);
            this.Subject = ko.observable(subject);
            this.Introduce = ko.observable(htmldecode(introduce));
            this.Feature = ko.observable(feature);
            this.OpenTime = ko.observable(openTime);
            this.IsPublished = ko.observable(isPublished);
            this.PublishDateTime = ko.observable(publishDateTime);
            this.DisplayOrder = ko.observable(displayOrder);
            this.DestType = ko.observable(destType);
            this.ProvinceId = ko.observable(provinceId);
            this.CityId = ko.observable(cityId);
            this.Address = ko.observable(address);
            this.Lng = ko.observable(lng);
            this.Lat = ko.observable(lat);
            this.SupplierId = ko.observable(supplierId);
            this.Supplier = ko.observable(supplier);
            this.BookingNotice = ko.observable(htmldecode(bookingNotice));
            this.Agreement = ko.observable(htmldecode(agreement));
            this.MetaTitle = ko.observable(metaTitle);
            this.MetaKeywords = ko.observable(metaKeywords);
            this.MetaDescription = ko.observable(metaDescription);
            this.ReturnUrl = ko.observable(returnUrl);
            this.IsCreate = ko.observable(false);

            this.TicketTypes = ko.observableArray(@Html.Raw(Model.TicketTypes.ToJsonString()));
            this.Tickets = ko.observableArray(@Html.Raw(Model.Tickets.ToJsonString()));
            this.Pictures = ko.observableArray(@Html.Raw(Model.Pictures.ToJsonString()));

            this.submit = function(data, event) {
                var url = $('#uiform').attr("action");
                var params = [];
                params.push({ name: "@Html.NameFor(m => m.Dest.Title)", value: _this.Title() });
                params.push({ name: "@Html.NameFor(m => m.Dest.Subject)", value: _this.Subject() });
                params.push({ name: "@Html.NameFor(m => m.Dest.Introduce)", value: htmlencode(_this.Introduce()) });
                params.push({ name: "@Html.NameFor(m => m.Dest.Feature)", value: _this.Feature() });
                params.push({ name: "@Html.NameFor(m => m.Dest.OpenTime)", value: _this.OpenTime() });
                params.push({ name: "@Html.NameFor(m => m.Dest.IsPublished)", value: _this.IsPublished() });
                params.push({ name: "@Html.NameFor(m => m.Dest.PublishDateTime)", value: _this.PublishDateTime() });
                params.push({ name: "@Html.NameFor(m => m.Dest.DisplayOrder)", value: _this.DisplayOrder() });
                params.push({ name: "@Html.NameFor(m => m.Dest.DestType)", value: _this.DestType() });
                params.push({ name: "@Html.NameFor(m => m.Dest.ProvinceId)", value: _this.ProvinceId() });
                params.push({ name: "@Html.NameFor(m => m.Dest.CityId)", value: _this.CityId() });
                params.push({ name: "@Html.NameFor(m => m.Dest.Address)", value: _this.Address() });
                params.push({ name: "@Html.NameFor(m => m.Dest.Lng)", value: _this.Lng() });
                params.push({ name: "@Html.NameFor(m => m.Dest.Lat)", value: _this.Lat() });
                params.push({ name: "@Html.NameFor(m => m.Dest.SupplierId)", value: _this.SupplierId() });
                params.push({ name: "@Html.NameFor(m => m.Dest.Supplier)", value: _this.Supplier() });
                params.push({ name: "@Html.NameFor(m => m.Dest.BookingNotice)", value: htmlencode(_this.BookingNotice()) });
                params.push({ name: "@Html.NameFor(m => m.Dest.Agreement)", value: htmlencode(_this.Agreement()) });
                params.push({ name: "@Html.NameFor(m => m.Dest.MetaTitle)", value: _this.MetaTitle() });
                params.push({ name: "@Html.NameFor(m => m.Dest.MetaKeywords)", value: _this.MetaKeywords() });
                params.push({ name: "@Html.NameFor(m => m.Dest.MetaDescription)", value: _this.MetaDescription() });
                App.startPageLoading({ animate: true });
                var $btn = $(event.target);
                $btn.button("loading");
                $.post(url,
                    params,
                    function(data) {
                        if (data.success) {
                            window.location = _this.ReturnUrl();
                            return;
                        } else {
                            App.alert({
                                container: '',
                                place: 'append', // append or prepent in container
                                type: 'danger', // alert's type
                                message: data.error.message, // alert's message
                                close: true, // make alert closable
                                reset: true, // close all previouse alerts first
                                focus: true, // auto scroll to the alert after shown
                                icon: 'warning' // put icon before the message
                            });
                        };
                        $btn.button('reset');
                        App.stopPageLoading();
                    },
                    'json');

            };

            this.loadProvinces = function() {
                var provincesUrl = '@Url.Action("GetAllProvinces", "Destination", new {area = "Mobile"}, true)';
                var params = [];
                params.push({ name: "countryType", value: _this.DestType() });
                App.blockUI({ target: '.location-portlet-body', animate: true });
                $.post(provincesUrl,
                    params,
                    function(data) {
                        App.unblockUI('.location-portlet-body');
                        if (data.success) {
                            vm.Provinces([]);
                            var $data = data.result;
                            if ($data == null) {
                                return;
                            }
                            for (var i = 0; i < $data.length; i++) {
                                vm.Provinces.push({ id: $data[i].id, name: $data[i].name });
                            }
                        } else {
                            App.alert({
                                container: '',
                                place: 'append', // append or prepent in container
                                type: 'danger', // alert's type
                                message: data.error.message, // alert's message
                                close: true, // make alert closable
                                reset: true, // close all previouse alerts first
                                focus: true, // auto scroll to the alert after shown
                                icon: 'warning' // put icon before the message
                            });
                        };
                    },
                    'json');
            };

            this.loadCities = function() {
                var citiesUrl = '@Url.Action("GetAllCities", "Destination", new {area = "Mobile"}, true)';
                var params = [];
                params.push({ name: "provinceId", value: _this.ProvinceId() });

                if (_this.ProvinceId() === '' || _this.ProvinceId() === undefined) {
                    return;
                }
                App.blockUI({ target: '.location-portlet-body', animate: true });
                $.post(citiesUrl,
                    params,
                    function(data) {
                        App.unblockUI('.location-portlet-body');
                        if (data.success) {
                            vm.Cities([]);
                            var $data = data.result;
                            if ($data == null) {
                                return;
                            }
                            for (var i = 0; i < $data.length; i++) {
                                vm.Cities.push({ id: $data[i].id, name: $data[i].name });
                            }
                        } else {
                            App.alert({
                                container: '',
                                place: 'append', // append or prepent in container
                                type: 'danger', // alert's type
                                message: data.error.message, // alert's message
                                close: true, // make alert closable
                                reset: true, // close all previouse alerts first
                                focus: true, // auto scroll to the alert after shown
                                icon: 'warning' // put icon before the message
                            });
                        };
                    },
                    'json');
            };

            this.ShowTicketType = function(data) {

                var types = _this.TicketTypes();
                for (var i = 0; i < types.length; i++) {
                    if (types[i].Id == data.TypeId) {
                        return types[i].Name;
                    }
                }

                return '';
            }

            this.ShowTicketEdit = function(data) {

                return '<a href="@Url.Action("TicketEdit", "Destination", new {area = "Admin"}, true)/' +
                    data.Id +
                    '?returnUrl=@Request.RawUrl.HtmlEncode()" class="btn btn-outline btn-circle btn-sm purple"><i class="fa fa-edit"></i> 编辑</a>';
            }

            //上传图片
            this.openUploadModal = function() {
                $('body').modalmanager('loading');

                uploadModal.load('@Url.Action("Index", "UploadFile", new {area = "Admin"}, true)',
                    '',
                    function() {
                        uploadModal.modal();
                    });
            }


        };

        var vm = new ViewModel("@Model.Dest.Title",
            "@Model.Dest.Subject",
            "@Model.Dest.Introduce",
            "@Model.Dest.Feature",
            "@Model.Dest.OpenTime",
            @Model.Dest.IsPublished.ToJsonString(),
            "@Model.Dest.PublishDateTime.ToString("yyyy-MM-dd")",
            @Model.Dest.DisplayOrder,
            @((int) Model.Dest.DestType),
            @Model.Dest.ProvinceId,
            @Model.Dest.CityId,
            "@Model.Dest.Address",
            "@Model.Dest.Lng",
            "@Model.Dest.Lat",
            @Model.Dest.SupplierId,
            "@Model.Dest.Supplier",
            "@Model.Dest.BookingNotice",
            "@Model.Dest.Agreement",
            "@Model.Dest.MetaTitle",
            "@Model.Dest.MetaKeywords",
            "@Model.Dest.MetaDescription",
            "@Request["ReturnUrl"]");

        ko.applyBindings(vm);

        $(function() {
            $('#upload-pic').on('click','.save-picture-mapping', function(event) {
                var $btn = $(event.target);
                $btn.button('loading');
                var url = '@Url.Action("AddDestPicture", "Destination", new {area = "Admin"}, true)';
                var params = [];
                params.push({ name: "Id", value: @Model.Dest.Id });
                params.push({ name: "DisplayOrder", value: uvm.DisplayOrder() });
                params.push({ name: "IsDefault", value: uvm.IsDefault() });
                params.push({ name: "FileItem.Path", value: uvm.Path() });
                params.push({ name: "FileItem.SEOFileName", value: uvm.SEOFileName() });
                params.push({ name: "FileItem.AltAttribute", value: uvm.AltAttribute() });
                params.push({ name: "FileItem.TitleAttribute", value: uvm.TitleAttribute() });

                App.blockUI({ target: 'body', animate: true });
                $.post(url,
                    params,
                    function(data) {
                        App.unblockUI('body');
                        $btn.button('reset');
                        if (data.success) {
                            if (data.result.success) {
                                vm.Pictures.push({ "FileItem": 
                                    { "Path": uvm.Path(), 
                                    "MimeType": null, 
                                    "SEOFileName": uvm.SEOFileName(),
                                    "AltAttribute": uvm.AltAttribute(),
                                    "TitleAttribute": uvm.TitleAttribute()}, 
                                    "IsDefault": uvm.IsDefault(),
                                    "DisplayOrder": uvm.DisplayOrder() , 
                                    "Id": data.result.id });
                                uploadModal.modal('hide');
                            } else {
                                App.alert({
                                    container: '',
                                    place: 'append', // append or prepent in container
                                    type: 'danger', // alert's type
                                    message: '服务器端错误数据未成功保存！', // alert's message
                                    close: true, // make alert closable
                                    reset: true, // close all previouse alerts first
                                    focus: true, // auto scroll to the alert after shown
                                    icon: 'warning' // put icon before the message
                                });
                            }
                        } else {
                            App.alert({
                                container: '',
                                place: 'append', // append or prepent in container
                                type: 'danger', // alert's type
                                message: data.error.message, // alert's message
                                close: true, // make alert closable
                                reset: true, // close all previouse alerts first
                                focus: true, // auto scroll to the alert after shown
                                icon: 'warning' // put icon before the message
                            });
                        };
                    },
                    'json');
            });
        });
    </script>
}