@using Abp.Json
@model HappyZu.CloudStore.Web.Areas.Admin.Models.EditTicketViewModel

@{
    ViewBag.Title = "添加景点门票";
}

<!-- BEGIN PAGE BAR -->
<div class="page-bar">
    <ul class="page-breadcrumb">
        <li>
            <a href="@Url.Action("Index", "Dashboard",new {area="Admin"},true)">控制面板</a>
            <i class="fa fa-angle-right"></i>
        </li>
        <li>
            <a href="@Url.Action("Index", "Destination",new {area="Admin"},true)">景点管理</a>
            <i class="fa fa-angle-right"></i>
        </li>
        <li>
            <a href="@Url.Action("DestEdit", "Destination",new {area="Admin",Id=Model.Dest.Id},true)">@(Model.Dest.Title)</a>
            <i class="fa fa-angle-right"></i>
        </li>
        <li>
            <span>@ViewBag.Title</span>
        </li>
    </ul>
</div>
<!-- END PAGE BAR -->
<!-- BEGIN PAGE TITLE-->
<div class="row">
    <div class="col-md-12 col-sm-12">
        <div class="zone zone-content">
            <div class="portlet solid portlet-box">
                <div class="portlet-title">
                    <div class="caption">
                        @ViewBag.Title
                    </div>
                    <div class="actions content-edit-box-actions">
                        <button type="submit" name="save" class="btn blue" data-loading-text="正在保存..." data-bind="click:submit">
                            <i class="fa fa-floppy-o"></i>
                            保存
                        </button>
                        <button type="submit" name="save-continue" class="btn blue" data-loading-text="正在保存..." data-bind="click:submitAndEdit">
                            <i class="fa fa-floppy-o"></i>
                            保存并继续编辑
                        </button>
                    </div>
                </div>
                <div class="portlet-body">
                    @using (Html.BeginForm("TicketCreate", "Destination", FormMethod.Post, new { id = "uiform" }))
                    {
                        @Html.Partial("_TicketCreateOrEdit", Model)
                    }
                </div>
            </div>

        </div>
    </div>
</div>
<div class="clearfix">
</div>
@section style_plugins{
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-timepicker/css/bootstrap-timepicker.min.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-daterangepicker/daterangepicker.min.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-modal/css/bootstrap-modal-bs3patch.css" rel="stylesheet" />
    <link href="~/Areas/Admin/content/global/plugins/bootstrap-modal/css/bootstrap-modal.css" rel="stylesheet" />
<link href="~/Areas/Admin/content/global/plugins/bootstrap-tagsinput/bootstrap-tagsinput.css" rel="stylesheet" />
<link href="~/Areas/Admin/content/global/plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
}
@section script_plugins{
    <script src="~/Areas/Admin/content/global/plugins/moment.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-daterangepicker/daterangepicker.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-datepicker/locales/bootstrap-datepicker.zh-CN.min.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-modal/js/bootstrap-modalmanager.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-modal/js/bootstrap-modal.js"></script>
    <script src="~/Areas/Admin/content/global/plugins/bootstrap-timepicker/js/bootstrap-timepicker.js"></script>
<script src="~/Areas/Admin/content/global/plugins/bootstrap-tagsinput/bootstrap-tagsinput.min.js"></script>
<script src="~/Areas/Admin/content/global/plugins/bootstrap-select/js/bootstrap-select.min.js"></script>
}


@section scripts{
    <script>
        $(function () {
            if (jQuery().datepicker) {
                $('#pricedaterange')
                    .daterangepicker({
                        "locale": {
                            "format": "MM/DD/YYYY",
                            "separator": " - ",
                            "applyLabel": "确认",
                            "cancelLabel": "取消",
                            "fromLabel": "From",
                            "toLabel": "To",
                            "customRangeLabel": "Custom",
                            "weekLabel": "W",
                            "daysOfWeek": [
                                "日", "一", "二", "三", "四", "五", "六"
                            ],
                            "monthNames": [
                                "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"
                            ],
                            "firstDay": 1
                        },
                        opens: (App.isRTL() ? 'right' : 'left'),
                        format: 'YYYY-MM-DD',
                        separator: ' 至 ',
                        minDate: moment(),
                        maxDate: moment().add(6, 'months').format('L')

                    },
                        showPriceDateRange);
            };

            if (jQuery().timepicker) {

                $('.advanced-time-picker')
                    .timepicker({
                        minuteStep: 1,
                        template: false,
                        appendWidgetTo: 'body',
                        showMeridian: false,
                        defaultTime: '8:00'
                    });
            }

            if (jQuery().datepicker) {
                $('.date-picker')
                    .datepicker({
                        rtl: App.isRTL(),
                        orientation: "right",
                        autoclose: true,
                        language: 'zh-CN'
                    });
            }

            var tags = $('.custom-date');
            tags.tagsinput({ freeInput: false });

            $('.tickettype-select').selectpicker({
                iconBase: 'fa',
                tickIcon: 'fa-check'
            });

            vm.loadTicketTypeList();
        });

        function showPriceDateRange(start, end) {
            var str = start.format('YYYY-MM-DD') + ' 至 ' + end.format('YYYY-MM-DD');
            $('#pricedaterange input').val(str);
            vm.DateRange(str);
            vm.StartDate(start.format('YYYY-MM-DD'));
            vm.EndDate(end.format('YYYY-MM-DD'));
        }

        $('#ticket-type-manager').on('hide.bs.modal', function () {
            $('.save-ticket-type').button('reset');
            App.stopPageLoading();
            vm.TicketTypeDisplayOrder('');
            vm.TicketTypeName('');
        });


        var ViewModel = function (returnUrl) {
            var _this = this;
            this.Name = ko.observable('');
            this.TypeId = ko.observable('');
            this.Points = ko.observable(0);
            this.Description = ko.observable('');
            this.MustAdvance = ko.observable(true);
            this.AdvanceBookingDays = ko.observable(0);
            this.EndTime = ko.observable(0);
            this.CanPayFrontMoney = ko.observable(false);
            this.FrontMoneyPrice = ko.observable(0);
            this.CanUsePoint = ko.observable(true);
            this.UsePoints = ko.observable(0);
            this.DateRange = ko.observable('');
            this.StartDate = ko.observable();
            this.EndDate = ko.observable();
            this.Price = ko.observable(0);
            this.AgentPrice = ko.observable(0);
            this.MarketPrice = ko.observable(0);
            this.CostPrice = ko.observable(0);
            this.Inventory = ko.observable(-1);
            this.QuotesType = ko.observable(0);

            this.TicketTypeName = ko.observable('');
            this.TicketTypeDisplayOrder = ko.observable('');
            this.ReturnUrl = ko.observable(returnUrl);
            this.TicketTypes = ko.observableArray([]);

            this.showAddTicketTypeMoble = function () {
                $('#ticket-type-manager').modal('show');
            };

            this.addTicketType = function (data, event) {
                var url = '@Url.Action("TicketTypeCreate", "Destination", new {area = "Admin", DestId = Model.Dest.Id}, true)';
                var params = [];
                params.push({ name: "Name", value: _this.TicketTypeName() });
                params.push({ name: "DisplayOrder", value: _this.TicketTypeDisplayOrder() });
                App.startPageLoading({ animate: true });
                var $btn = $(event.target);
                $btn.button("loading");
                $.post(url, params, function (data) {
                    if (data.success) {
                        $('#ticket-type-manager').modal('hide');
                        App.stopPageLoading();
                        _this.loadTicketTypeList();
                        return;
                    } else {
                        App.alert({
                            container: '',
                            place: 'append', // append or prepent in container
                            type: 'danger', // alert's type
                            message: data.error.message, // alert's message
                            close: true, // make alert closable
                            reset: true, // close all previouse alerts first
                            focus: true, // auto scroll to the alert after shown
                            icon: 'warning' // put icon before the message
                        });
                    };
                    $btn.button('reset');
                    App.stopPageLoading();
                },
                    'json');
            }

            this.loadTicketTypeList = function () {
                var url = '@Url.Action("GetTicketType", "Destination", new {area = "Admin", DestId = Model.Dest.Id}, true)';
                App.startPageLoading({ animate: true });
                $.post(url, {}, function (data) {
                    if (data.success) {
                        var list = data.result.list;
                        _this.TicketTypes([]);
                        for (var i = 0; i < list.length; i++) {
                            _this.TicketTypes.push(list[i]);
                        }
                        $('.tickettype-select').selectpicker('refresh');
                    } else {
                        App.alert({
                            container: '',
                            place: 'append', // append or prepent in container
                            type: 'danger', // alert's type
                            message: data.error.message, // alert's message
                            close: true, // make alert closable
                            reset: true, // close all previouse alerts first
                            focus: true, // auto scroll to the alert after shown
                            icon: 'warning' // put icon before the message
                        });
                    };
                    App.stopPageLoading();
                },'json');
            }

            this.submitAndEdit = function (data, event) {
                _this.postData(data, event, true);
            }

            this.submit = function (data, event) {
                _this.postData(data, event, false);
            }

            this.postData = function (data, event, edit) {
                var url = $('#uiform').attr("action");
                var params = [];
                params.push({ name: "@Html.NameFor(m=>m.Ticket.DestId)", value: '@Model.Dest.Id' });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.Name)", value: _this.Name() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.TypeId)", value: _this.TypeId() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.Points)", value: _this.Points() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.Description)", value: _this.Description() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.MustAdvance)", value: _this.MustAdvance() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.AdvanceBookingDays)", value: _this.AdvanceBookingDays() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.EndTime)", value: _this.EndTime() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.CanPayFrontMoney)", value: _this.CanPayFrontMoney() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.UsePoints)", value: _this.UsePoints() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.StartDate)", value: _this.StartDate() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.EndDate)", value: _this.EndDate() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.Price)", value: _this.Price() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.AgentPrice)", value: _this.AgentPrice() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.MarketPrice)", value: _this.MarketPrice() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.CostPrice)", value: _this.CostPrice() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.Inventory)", value: _this.Inventory() });
                params.push({ name: "@Html.NameFor(m=>m.Ticket.QuotesType)", value: _this.QuotesType() });

                App.startPageLoading({ animate: true });
                var $btn = $(event.target);
                $btn.button("loading");
                $.post(url,
                    params,
                    function (data) {
                        if (data.success) {
                            if (edit) {
                                window.location = "@Url.Action("TicketEdit","Destination",new {area= "Admin" },true)/" + data.result.id + '?returnUrl=' + _this.ReturnUrl();
                            } else {
                                window.location = _this.ReturnUrl();
                            }
                            return;
                        } else {
                            App.alert({
                                container: '',
                                place: 'append', // append or prepent in container
                                type: 'danger', // alert's type
                                message: data.error.message, // alert's message
                                close: true, // make alert closable
                                reset: true, // close all previouse alerts first
                                focus: true, // auto scroll to the alert after shown
                                icon: 'warning' // put icon before the message
                            });
                        };
                        $btn.button('reset');
                        App.stopPageLoading();
                    },
                    'json');

            }

            this.UpdateTicketQuote=function(data,event) {
               

            }
        };

        var vm = new ViewModel("@Request["ReturnUrl"]");

        ko.applyBindings(vm);


    </script>
}